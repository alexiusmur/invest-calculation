import { useEffect } from 'react';
import './App.css';
import Form from 'react-bootstrap/Form';
import Container from 'react-bootstrap/Container';
import Button from 'react-bootstrap/Button';
import { useState } from 'react';
import { BarChart } from './components/BarChart';

import logoImg from './images/money-box.gif';

function App() {

  const [percent, setPersent] = useState('')
  const [amount, setAmount] = useState('')
  const [numPayments, setNumPayments] = useState('4')
  const [results, setResults] = useState([]);

  const generatePaymentDates = (startDate, numPayments) => {
    const paymentDates = [];
    let currentDate = new Date(startDate); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–∞—Ç–∏ –≤ –æ–±'—î–∫—Ç Date

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞—Ç–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–ª–∞—Ç–µ–∂—ñ–≤
    for (let i = 0; i < numPayments; i++) {
      // –î–æ–¥–∞—î–º–æ –ø—ñ–≤ —Ä–æ–∫—É –¥–ª —Ç—Ä–∏–≤–∞–ª–æ—ó –¥–∞—Ç–∏
      currentDate.setMonth(currentDate.getMonth() + 6);
      const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å, –µ—Å–ª–∏ –º–µ—Å—è—Ü —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
      const year = currentDate.getFullYear().toString().slice(-2); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞
      const paymentDate = `${currentDate.getDate()}.${month}.${year}`;
      paymentDates.push(paymentDate);
    }

    return paymentDates;
  };
  const startDate = '2024-01-30'; // –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å
  const numPaymentss = numPayments; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π


  const calculate = () => {
    const percentFloat = parseFloat(percent);
    const amountInt = parseInt(amount);

    if (!isNaN(percentFloat) && !isNaN(amountInt)) {
      // const paymentDates = ['31.07.24', '29.01.25', '30.07.25', '28.01.26'];
      const paymentDates = generatePaymentDates(startDate, numPaymentss);
      const array = Array.from({ length: numPayments }, (_, index) => index + 1);

      let totalAmount = 0;
      const returns = array.map((paymentDate, index) => {
        const countBonds = amountInt; // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–ª—ñ–≥–∞—Ü—ñ–π
        const totalPerDate = countBonds * percentFloat * 10; // –î–æ—Ö—ñ–¥ –Ω–∞ –¥–∞—Ç—É –≤–∏–ø–ª–∞—Ç
        totalAmount += totalPerDate; // –∑–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –Ω–∞ –¥–∞–Ω—É –¥–∞—Ç—É
        return {
          paymentDate: paymentDates[index],
          countBonds: countBonds,
          totalPerDate: totalPerDate / 2,
          totalAmount: totalAmount / 2,
        };
      });

      setResults(returns);
    } else {
      // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –≤–≤–æ–¥—É
      console.error('Invalid input');
    }
  };

  const [isLoading, setLoading] = useState(false);

  useEffect(() => {
    function simulateNetworkRequest() {
      return new Promise((resolve) => setTimeout(resolve, 500));
    }

    if (isLoading) {
      simulateNetworkRequest().then(() => {
        setLoading(false);
      });
    }
  }, [isLoading]);

  const handleClick = () => setLoading(true);

  const [displayedIndex, setDisplayedIndex] = useState(0);

  useEffect(() => {
    // –Ø–∫—â–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ, –∑–∞–≤–µ—Ä—à—É—î–º–æ –µ—Ñ–µ–∫—Ç
    if (displayedIndex >= results.length) return;

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    const timerId = setTimeout(() => {
      // –ó–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞
      setDisplayedIndex(displayedIndex + 1);
    }, 250);

    // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => clearTimeout(timerId);
  }, [displayedIndex, results]);


  return (
    <div className="App">
      <header className="App-header">
        <a href="/">
          <img src={logoImg} alt='logo' />
        </a>
      </header>
      <Container>
        <div className='block'>
          <Form.Control
            placeholder="—Å—Ç–∞–≤–∫–∞ %"
            value={percent}
            type='number'
            className='input'
            onChange={(e) => setPersent(e.target.value)}
          />
          <p>% —Å—Ç–∞–≤–∫–∞</p>
        </div>

        <div className='block'>
          <Form.Control
            placeholder="–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–ª—ñ–≥–∞—Ü—ñ–π"
            value={amount}
            type='number'
            className='input'
            onChange={(e) => setAmount(e.target.value)}
          />
          <p>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–ª—ñ–≥–∞—Ü—ñ–π üìà</p>
        </div>

        <div className='block'>
          <Form.Control
            placeholder="–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–∞—Ç–µ–∂—ñ–≤"
            value={numPayments}
            type='number'
            className='input'
            onChange={(e) => setNumPayments(e.target.value)}
          />
          <p>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–∞—Ç–µ–∂—ñ–≤ üí≥</p>
        </div>

        <Button
          variant='outline-success'
          className='btn'
          onClick={() => {
            handleClick();
            calculate();
          }}
        >
          {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶' : '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏'}
        </Button>

        <div className='block_results'>
          <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</h2>
          {amount ?
            <p>{amount.toLocaleString()} –æ–±–ª—ñ–≥–∞—Ü—ñ–π = {(amount * 1000).toLocaleString()} –≥—Ä–Ω</p>
            :
            <></>
          }

          <table className="results-table">
            <thead>
              <tr>
                <th>–î–∞—Ç–∞ –≤–∏–ø–ª–∞—Ç</th>
                <th>–ö-—Å—Ç—å –æ–±–ª—ñ–≥–∞—Ü—ñ–π</th>
                <th>–î–æ—Ö—ñ–¥</th>
                <th>–°–ø—ñ–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥</th>
              </tr>
            </thead>
            <tbody>
            {results.slice(0, displayedIndex).map((result, index) => (
                <tr key={index}>
                  <td>{result.paymentDate}</td>
                  <td>{result.countBonds}</td>
                  <td>{result.totalPerDate}</td>
                  <td>{result.totalAmount}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <BarChart data={results} />

      </Container >

    </div >
  );
}

export default App;
